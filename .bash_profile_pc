_enter_dot_file 2>/dev/null || true
_say_something "running as USER:$USER"

#------------------------------------------------------------------

# System wide environment variables and startup programs are in /etc/profile
#   also see: "C:/Documents and Settings/gsisson/.inputrc"
#   which contains shell key bindings and terminal settings (bell on/off), etc

# base-files version 3.9-3

# To pick up the latest recommended .bash_profile content,
# look in /etc/defaults/etc/skel/.bash_profile

# Modifying /etc/skel/.bash_profile directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bash_profile) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# ~/.bash_profile: executed by bash for login shells.

# source the VDI specific bash_profile
_source_dot_file ~/.vdi >/dev/null 2>&1 || true

# source the system wide bashrc if it exists
_source_dot_file /etc/bash.bashrc 2>/dev/null || true

# source the users bashrc if it exists
_source_dot_file ~/.bashrc 2>/dev/null || true

# Set PATH so it includes user's private bin if it exists
# if [ -d "${HOME}/bin" ] ; then
#   PATH=${HOME}/bin:${PATH}
# fi
pathReplace /cygdrive/c/bin/bat "$HOME/bin"

# Set MANPATH so it includes users' private man if it exists
# if [ -d "${HOME}/man" ]; then
#   MANPATH=${HOME}/man:${MANPATH}
# fi

# Set INFOPATH so it includes users' private info if it exists
# if [ -d "${HOME}/info" ]; then
#   INFOPATH=${HOME}/info:${INFOPATH}
# fi

### selections from c:/mksnt/profile.ksh

HOME=`echo $HOME | cygdrivePathFix`
export h="$HOME"
export nul=/dev/null
export null=/dev/null
export prog="$h/usr/src"
export java="$h/usr/src/Java/"
export progcs="$h/usr/src/DotNet/C#"
export code="$prog"
export codej="$progj"
export codecs="$progcs"
export odd='c:/Documents and Settings/gsisson/My Documents/WORK/Projects/ODD'
export ftp=c:/inetpub/ftproot
export ftpupload=c:/inetpub/ftprootUpload
export pf="c:/Program Files"
export wwwh="c:/InetPub/wwwroot"
export data="${data}"
export etc=${paa_PathSystem%;*}/drivers/etc
export etc=${SystemRoot_U}/system32/drivers/etc
export browser=${USERPROFILE}/usr/src/DotNet/C#/browser
export dropbox=${USERPROFILE}/Documents/Dropbox
export CYGWIN=nodosfilewarning
export dropbox=${USERPROFILE}/Documents/Dropbox
export download=${USERPROFILE}/Documents/Downloads
export download=${USERPROFILE}/Downloads
export downloads=${download}
export tr="t:/recyclable"
alias a="cd a:/ || o bitlocker"
alias b="cd b:/ || o bitlocker"
alias t="cd $tr || o bitlocker"
alias u="cd u:/ || o bitlocker"
alias x="cd x:/ || o bitlocker"
alias v="cd v:/ || o bitlocker"

# single letter variables for each possible drive
# example: "export a='a:'"
for drive in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
  eval export $drive=${drive}:
done

# don't do the following, local dir DN get priority:
#   cd /; cd tmp; $PWD = ~/tmp # :-(
# export CDPATH='~' # allow 'cd src' to do 'cd ~/src'

# if [ ! -d "$paa_Java" -a false ]
# then
#   if [ -f "$(which java)" ]; then
#     : # echo found java:
#     : # java -version
#   else
#     echo 'directory '\"$paa_Java\"' DNE!'
#     echo '          '\"$paa_Java\"' is value of $paa_Java variable'
#     echo 'perhaps the jdk was updated on disk, and the jdk symlink was deleted?'
#     echo 'here is what is in $paa_Java/../..:'
#     echo ls \"$paa_Java/../..\"
#          ls "$paa_Java/../.."
#     echo 'maybe run: cd $paa_Java/../.. ; ln -s jdk1.6.0_99 jdk # or whatever the existing jdk versions are'
#   fi
# fi

### selections from c:/mksnt/profile.ksh (continued)

#  PATHb2f
#. jpath -s
# ps1

### end of selections from c:/mksnt/environ.ksh

export HISTSIZE=2000
export HISTIGNORE=":ls:ll:pwd:[bf]g:exit"

cd .

#shopt -s nocaseglob
#shopt -u cmdhist

#------------------------------------------------------------------
# Start the SSH agent, so that processes can get the SSH keys at
# runtime.  (unfortunately, this doesn't seem to work on the PC
# so it is commented out, as it seems to slow down the shell when
# the network is not available
#SSHAGENT=/usr/bin/ssh-agent
#SSHAGENTARGS="-s"
#if [ -z "$SSH_AUTH_SOCK" -a -x "$SSHAGENT" ]; then
#	eval `$SSHAGENT $SSHAGENTARGS`
#	trap "kill $SSH_AGENT_PID" 0
#fi
#------------------------------------------------------------------

_say_something "running as USER:$USER"
_leave_dot_file 2>/dev/null || true
